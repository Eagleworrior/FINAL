🎨 app/Theme.kt

`kotlin
package com.eaglex.app.ui.theme

import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color

private val Gold = Color(0xFFF2C94C)
private val Ink = Color(0xFF0B0F14)
private val Stone = Color(0xFF1F2A33)
private val Teal = Color(0xFF00A2A8)
private val Ivory = Color(0xFFFFF9F0)

private val LightColors = lightColorScheme(
  primary = Gold,
  onPrimary = Ink,
  secondary = Teal,
  onSecondary = Ink,
  background = Ivory,
  onBackground = Ink,
  surface = Color.White,
  onSurface = Ink
)

@Composable
fun EagleXTheme(content: @Composable () -> Unit) {
  MaterialTheme(
    colorScheme = LightColors,
    typography = Typography(),
    content = content
  )
}
`

---

🚀 app/App.kt

`kotlin
package com.eaglex.app

import android.app.Application
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.ui.tooling.preview.Preview
import com.eaglex.app.navigation.NavGraph
import com.eaglex.app.ui.theme.EagleXTheme

class EaglexApp : Application()

@Composable
fun AppRoot() {
  EagleXTheme {
    Scaffold {
      NavGraph()
    }
  }
}

@Preview
@Composable
fun PreviewApp() {
  AppRoot()
}
`

---

🧭 app/NavGraph.kt

`kotlin
package com.eaglex.app.navigation

import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.eaglex.app.ui.*

sealed class Route(val path: String) {
  data object CapsuleComposer : Route("capsuleComposer")
  data object EscrowRoom : Route("escrowRoom/{escrowId}")
  data object BadgeVault : Route("badgeVault")
  data object MonumentScanner : Route("monumentScanner")
  data object Markets : Route("markets")
}

@Composable
fun NavGraph(navController: NavHostController = rememberNavController()) {
  NavHost(navController, startDestination = Route.CapsuleComposer.path) {
    composable(Route.CapsuleComposer.path) { CapsuleComposerScreen(navController) }
    composable(Route.BadgeVault.path) { BadgeVaultScreen(navController) }
    composable(Route.MonumentScanner.path) { MonumentScannerScreen(navController) }
    composable(Route.Markets.path) { MarketsScreen(navController) }
    composable(Route.EscrowRoom.path) {
      val escrowId = it.arguments?.getString("escrowId") ?: "esc_0"
      EscrowRoomScreen(navController, escrowId)
    }
  }
}
`

---

🛠 data/Models.kt

`kotlin
package com.eaglex.app.data.model

data class Capsule(val id: String, val name: String, val purpose: String, val region: String)
data class Oath(val id: String, val text: String, val requiresGuardian: Boolean, val audioHash: String?)
data class Badge(val id: String, val name: String, val issuedAt: String, val issuer: String)
data class Listing(val id: String, val title: String, val currency: String, val price: Long, val escrowEnabled: Boolean)
data class Escrow(val id: String, val listingId: String, val buyerId: String, val status: String, val fxRate: String?)
data class Monument(val id: String, val name: String, val lat: Double, val lng: Double)
data class Candle(val t: Long, val o: Double, val h: Double, val l: Double, val c: Double, val v: Double)
`

---

📊 utils/Indicators.kt

`kotlin
object Indicators {
  fun sma(values: List<Double>, n: Int) = values.indices.map { i ->
    if (i + 1 < n) null else values.subList(i - n + 1, i + 1).average()
  }

  fun rsi(closes: List<Double>, period: Int = 14): List<Double?> {
    var avgGain = 0.0
    var avgLoss = 0.0
    val rsis = MutableList<Double?>(closes.size) { null }
    for (i in 1 until closes.size) {
      val change = closes[i] - closes[i - 1]
      val gain = change.coerceAtLeast(0.0)
      val loss = (-change).coerceAtLeast(0.0)
      if (i <= period) {
        avgGain += gain
        avgLoss += loss
        if (i == period) {
          avgGain /= period
          avgLoss /= period
          val rs = if (avgLoss == 0.0) Double.POSITIVE_INFINITY else avgGain / avgLoss
          rsis[i] = 100 - 100 / (1 + rs)
        }
      } else {
        avgGain = (avgGain * (period - 1) + gain) / period
        avgLoss = (avgLoss * (period - 1) + loss) / period
        val rs = if (avgLoss == 0.0) Double.POSITIVE_INFINITY else avgGain / avgLoss
        rsis[i] = 100 - 100 / (1 + rs)
      }
    }
    return rsis
  }
}
`

---

🌐 api/openapi.yaml

`yaml
openapi: 3.0.3
info:
  title: EAGLE X API
  version: 1.0.0
paths:
  /onboarding:
    post:
      summary: Create steward profile
      responses:
        "200": { description: Created }
  /guardians/invite:
    post:
      summary: Invite guardian
      responses:
        "200": { description: OK }
  /oaths/sign:
    post:
      summary: Sign oath
      responses:
        "200": { description: OK }
  /trade/list:
    post:
      summary: Create listing
      responses:
        "200": { description: OK }
  /escrow/open:
    post:
      summary: Open escrow
      responses:
        "200": { description: OK }
  /monuments/near:
    get:
      summary: Nearby monuments
      parameters:
        - name: lat
          in: query
          schema: { type: number }
        - name: lng
          in: query
          schema: { type: number }
        - name: radius
          in: query
          schema: { type: integer }
      responses:
        "200": { description: OK }
  /markets/overview:
    get:
      summary: Markets overview
      responses:
        "200": { description: OK }
  /markets/technicals:
    get:
      summary: Indicators
      responses:
        "200": { description: OK }
`

---
